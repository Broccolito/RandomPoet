return(yun)
}
}
first.sent = create.sent(char)
yun = getyun.lastchar(first.sent)
second.sent = create.sent(char)
cat("Generating loops with Yun.")
starcount = "."
while(getyun.lastchar(second.sent) != yun){
second.sent = create.sent(char)
cat(starcount)
}
loop = paste(first.sent,",",second.sent,".",sep = "")
cat("\n")
return(loop)
}
}
yunpoem = ""
for(i in 1:sent/2){
yunpoem = paste(yunpoem,getloop(char = char))
}
return(yunpoem)
}
}
lls()
ls()
poem.withyun()
rm(list= ls())
ls()
database = "全唐诗.txt"
if(!exists("desktop")){
source("fileoperation.r")
}
if(!all(exists("wktag"),exists("wk"),exists("cl"))){
library(jiebaR)
wk = jiebaR::worker()
wktag = jiebaR::worker(type = "tag")
}
gettag = function(string){
while(!all(exists("wktag"),exists("wk"))){
library(jiebaR)
wk = jiebaR::worker()
wktag = jiebaR::worker(type = "tag")
}
if(length(wk[string]) == 1){
return(names(wktag[string]))
}else{
return("x")
}
}
mkdict.total = function(content){
dict = data.frame(word = wk[content], tag = names(wktag[content]))
return(dict)
}
mkdict.n = function(dict){
if(dim(dict)[2] == 2){
dict.n = vector()
n = 1
for(i in 1:dim(dict)[1]){
tag = dict[i,2]
if(any(tag == c("r",
"n",
"x",
"ns",
"s",
"i",
"b",
"uv",
"nz",
"nrt"
))){
dict.n[n] = as.character(dict[i,1])
n = n + 1
}
}
dict.n = gsub("\\d","",dict.n)
dict.n = dict.n[!is.na(dict.n)]
return(dict.n)
}else{
return(FALSE)
}
}
mkdict.v = function(dict){
if(dim(dict)[2] == 2){
dict.n = vector()
n = 1
for(i in 1:dim(dict)[1]){
tag = dict[i,2]
if(any(tag == c("v",
"x",
"d",
"p",
"c",
"zg"
))){
dict.n[n] = as.character(dict[i,1])
n = n + 1
}
}
dict.n = gsub("\\d","",dict.n)
dict.n = dict.n[!is.na(dict.n)]
return(dict.n)
}else{
return(FALSE)
}
}
mkdict.a = function(dict){
if(dim(dict)[2] == 2){
dict.n = vector()
n = 1
for(i in 1:dim(dict)[1]){
tag = dict[i,2]
if(any(tag == c("a",
"t",
"n"
))){
dict.n[n] = as.character(dict[i,1])
n = n + 1
}
}
dict.n = gsub("\\d","",dict.n)
dict.n = dict.n[!is.na(dict.n)]
return(dict.n)
}else{
return(FALSE)
}
}
content = readChar(database, nchars = file.info(database)$size)
content = gsub("\\d","",content) #Get rid of the numbers in the content
dict.total = mkdict.total(content = content); rm(content)
dict.noun = mkdict.n(dict.total)
dict.verb = mkdict.v(dict.total)
dict.adj = mkdict.a(dict.total)
dict.noun.one = dict.noun[nchar(dict.noun) == 1]
dict.noun.two = dict.noun[nchar(dict.noun) == 2]
dict.noun.three = dict.noun[nchar(dict.noun) == 3]
dict.noun.four = dict.noun[nchar(dict.noun) == 4]
dict.verb.one = dict.verb[nchar(dict.verb) == 1]
dict.verb.two = dict.verb[nchar(dict.verb) == 2]
dict.verb.three = dict.verb[nchar(dict.verb) == 3]
dict.verb.four = dict.verb[nchar(dict.verb) == 4]
dict.adj.one = dict.adj[nchar(dict.adj) == 1]
dict.adj.two = dict.adj[nchar(dict.adj) == 2]
dict.adj.three = dict.adj[nchar(dict.adj) == 3]
dict.adj.four = dict.adj[nchar(dict.adj) == 4]
scanned.noun = length(dict.noun)
scanned.noun.unique = length(unique(dict.noun))
scanned.verb = length(dict.verb)
scanned.verb.unique = length(unique(dict.verb))
scanned.adj = length(dict.adj)
scanned.adj.unique = length(unique(dict.adj))
print(paste(scanned.noun,
"nouns are scanned, within which",
scanned.noun.unique, "nouns are unique nouns.",
sep = " "));rm(scanned.noun,scanned.noun.unique)
print(paste(scanned.verb,
"verbs are scanned, within which",
scanned.verb.unique, "verbss are unique verbs.",
sep = " "));rm(scanned.verb,scanned.verb.unique)
print(paste(scanned.adj,
"adjectives are scanned, within which",
scanned.adj.unique, "adjectives are unique adjectives.",
sep = " "));rm(scanned.adj,scanned.adj.unique)
setwd("C:\\Users\\lenovo\\Desktop\\RandomPoet")
rm(list= ls())
database = "全唐诗.txt"
setwd("C:\\Users\\lenovo\\Desktop\\RandomPoet")
if(!exists("desktop")){
source("fileoperation.r")
}
if(!all(exists("wktag"),exists("wk"),exists("cl"))){
library(jiebaR)
wk = jiebaR::worker()
wktag = jiebaR::worker(type = "tag")
}
gettag = function(string){
while(!all(exists("wktag"),exists("wk"))){
library(jiebaR)
wk = jiebaR::worker()
wktag = jiebaR::worker(type = "tag")
}
if(length(wk[string]) == 1){
return(names(wktag[string]))
}else{
return("x")
}
}
mkdict.total = function(content){
dict = data.frame(word = wk[content], tag = names(wktag[content]))
return(dict)
}
mkdict.n = function(dict){
if(dim(dict)[2] == 2){
dict.n = vector()
n = 1
for(i in 1:dim(dict)[1]){
tag = dict[i,2]
if(any(tag == c("r",
"n",
"x",
"ns",
"s",
"i",
"b",
"uv",
"nz",
"nrt"
))){
dict.n[n] = as.character(dict[i,1])
n = n + 1
}
}
dict.n = gsub("\\d","",dict.n)
dict.n = dict.n[!is.na(dict.n)]
return(dict.n)
}else{
return(FALSE)
}
}
mkdict.v = function(dict){
if(dim(dict)[2] == 2){
dict.n = vector()
n = 1
for(i in 1:dim(dict)[1]){
tag = dict[i,2]
if(any(tag == c("v",
"x",
"d",
"p",
"c",
"zg"
))){
dict.n[n] = as.character(dict[i,1])
n = n + 1
}
}
dict.n = gsub("\\d","",dict.n)
dict.n = dict.n[!is.na(dict.n)]
return(dict.n)
}else{
return(FALSE)
}
}
mkdict.a = function(dict){
if(dim(dict)[2] == 2){
dict.n = vector()
n = 1
for(i in 1:dim(dict)[1]){
tag = dict[i,2]
if(any(tag == c("a",
"t",
"n"
))){
dict.n[n] = as.character(dict[i,1])
n = n + 1
}
}
dict.n = gsub("\\d","",dict.n)
dict.n = dict.n[!is.na(dict.n)]
return(dict.n)
}else{
return(FALSE)
}
}
content = readChar(database, nchars = file.info(database)$size)
content = gsub("\\d","",content) #Get rid of the numbers in the content
dict.total = mkdict.total(content = content); rm(content)
dict.noun = mkdict.n(dict.total)
dict.verb = mkdict.v(dict.total)
dict.adj = mkdict.a(dict.total)
dict.noun.one = dict.noun[nchar(dict.noun) == 1]
dict.noun.two = dict.noun[nchar(dict.noun) == 2]
dict.noun.three = dict.noun[nchar(dict.noun) == 3]
dict.noun.four = dict.noun[nchar(dict.noun) == 4]
dict.verb.one = dict.verb[nchar(dict.verb) == 1]
dict.verb.two = dict.verb[nchar(dict.verb) == 2]
dict.verb.three = dict.verb[nchar(dict.verb) == 3]
dict.verb.four = dict.verb[nchar(dict.verb) == 4]
dict.adj.one = dict.adj[nchar(dict.adj) == 1]
dict.adj.two = dict.adj[nchar(dict.adj) == 2]
dict.adj.three = dict.adj[nchar(dict.adj) == 3]
dict.adj.four = dict.adj[nchar(dict.adj) == 4]
scanned.noun = length(dict.noun)
scanned.noun.unique = length(unique(dict.noun))
scanned.verb = length(dict.verb)
scanned.verb.unique = length(unique(dict.verb))
scanned.adj = length(dict.adj)
scanned.adj.unique = length(unique(dict.adj))
print(paste(scanned.noun,
"nouns are scanned, within which",
scanned.noun.unique, "nouns are unique nouns.",
sep = " "));rm(scanned.noun,scanned.noun.unique)
print(paste(scanned.verb,
"verbs are scanned, within which",
scanned.verb.unique, "verbss are unique verbs.",
sep = " "));rm(scanned.verb,scanned.verb.unique)
print(paste(scanned.adj,
"adjectives are scanned, within which",
scanned.adj.unique, "adjectives are unique adjectives.",
sep = " "));rm(scanned.adj,scanned.adj.unique)
#This is the script for better management of file directory
#This function will help reset the working directory to desktop
desktop = function(){
setwd("C:/Users/lenovo/Desktop")
}
#This function will help get into the directory specified
getinto = function(filename){
if(!dir.exists(filename)){
print("The file is not found...")
stop("Wrong directory...")
}else{
setwd(paste(getwd(),"/",filename,sep = ""))
print("The new directory is:")
getwd()
}
}
#This function will go back to the previous directory
getback = function(){
wd = strsplit(getwd(),"/")
wd = wd[[1]]
if(length(wd)>1){
newwd = wd[1:length(wd)-1]
temwd = ""
for(i in 1:length(newwd)){
temwd = paste(temwd,newwd[i],sep = "/")
}
temwd = substring(temwd,2,nchar(temwd))
setwd(temwd)
}else{
print("The current directory is already the mother directory...")
warning("Unable to get back to previous directory...")
}
print("The current directory is:")
getwd()
}
#This function will create a massive number of folders with homogeous naming
bat.create = function(filename,number){
for(i in 1:number){
dir.create(paste(filename,i,sep = "_"))
}
}
#This function will either delate all the files in the directory or delate the files with certain extentions
bat.delate = function(type, x){
fl = list.files()
if(type == "all"){
removedfile = ""
for(i in 1:length(fl)){
removedfile = c(removedfile,fl[i])
file.remove(fl[i])
}
}else if(type == "ext"){
removedfile = ""
for(i in 1:length(fl)){
temfl = strsplit(fl[i],"[.]")
temfl = temfl[[1]]
if(temfl[length(temfl)] == x){
removedfile = c(removedfile,fl[i])
file.remove(fl[i])
}
}
}
if(length(removedfile) > 1){
print("The files that are removed are listed: ")
print(removedfile[2:length(removedfile)])
}
}
#This function will return all the unique file formats in the directory
unique.type = function(){
fl = list.files()
ftype = vector()
for(i in 1:length(fl)){
temfl = unlist(strsplit(fl[i],"[.]"))
if(length(temfl) > 1){
ftype[i] = temfl[length(temfl)]
}
}
ftype = unique(ftype[!is.na(ftype)])
return(ftype)
}
database = "全唐诗.txt"
setwd("C:\\Users\\lenovo\\Desktop\\RandomPoet")
if(!exists("desktop")){
source("fileoperation.r")
}
if(!all(exists("wktag"),exists("wk"),exists("cl"))){
library(jiebaR)
wk = jiebaR::worker()
wktag = jiebaR::worker(type = "tag")
}
if(!exists("desktop")){
source("fileoperation.r")
}
if(!exists("create.sent")){
source("compose.r")
}
poem.withyun = function(char = 5,sent = 4){
if(any(round(sent/2,1) != round(sent/2,0),sent <= 0)){
return("Yun can only be achieved when positive even sentences are operated.")
}else{
if(!exists("getloop")){
getloop = function(char = 5){
if(!exists("getyun.lastchar")){
getyun.lastchar = function(sentence){
last.char = unlist(strsplit(sentence,""))
last.char = last.char[length(last.char)]
yun = getyun(last.char)
return(yun)
}
}
first.sent = create.sent(char)
yun = getyun.lastchar(first.sent)
second.sent = create.sent(char)
cat("Generating loops with Yun.")
starcount = "."
while(getyun.lastchar(second.sent) != yun){
second.sent = create.sent(char)
cat(starcount)
}
loop = paste(first.sent,",",second.sent,".",sep = "")
cat("\n")
return(loop)
}
}
yunpoem = ""
for(i in 1:sent/2){
yunpoem = paste(yunpoem,getloop(char = char))
}
return(yunpoem)
}
}
setwd("C:\\Users\\lenovo\\Desktop\\RandomPoet")
library("pinyin")
if(!exists("desktop")){
source("fileoperation.r")
}
if(!exists("dict.total")){
source("makedict.r")
}
getpinyin = function(Char){
return(pinyin(mychar = Char,method = "toneless",sep = " "))
}
getyun = function(char){
charpinyin = getpinyin(Char = char)
charpinyin = unlist(strsplit(charpinyin,""))
for(i in 1:length(charpinyin)){
if(any(charpinyin[i] == c("a","e","i","o","u"))){
temyun = charpinyin[i:length(charpinyin)];break
}
}
yun = ""
for(i in 1:length(temyun)){
yun = paste(yun,temyun[i],sep = "")
}
return(yun)
}
wordbutverb = function(){
selection = c(FALSE,TRUE)
choice = sample(selection,1)
if(choice){
newput = sample(dict.noun,1)
}else if(!choice){
newput = sample(dict.adj,1)
}
return(newput)
}
create.sent = function(n = 5){
again = TRUE
while(again){
verb = sample(dict.verb,1)
nadj = wordbutverb()
while(nchar(nadj) + nchar(verb) > n){
nadj = wordbutverb()
}
if(nchar(nadj) + nchar(verb) == n){
temsent = c(nadj,verb)
again = FALSE
}else{
temsent = c(nadj,verb)
again = TRUE
}
}
temsent = sample(temsent,length(temsent),replace = FALSE)
sent = ""
for(i in 1:length(temsent)){
sent = paste(sent,temsent[i],sep = "")
}
return(sent)
}
print.rand.poem = function(char = 5,sent = 4){
for(i in 1:sent){
print(create.sent(char))
}
}
ls()
print.rand.poem()
print.rand.poem()
print.rand.poem()
print.rand.poem()
print.rand.poem()
print.rand.poem()
print.rand.poem()
print.rand.poem()
print.rand.poem()
print.rand.poem(4,3)
print.rand.poem(4,12)
a = print.rand.poem(4,2)
a
print.rand.poem
history(reverse = TRUE)
rm(list = ls())
ls()
q()
